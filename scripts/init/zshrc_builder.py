from pathlib import Path
import shutil

class ZshrcBuilder:
    def __init__(self):
        self.lines = []
        self.plugins = []
        self.aliases = {}
        self.env_vars = {}

    def add_plugin(self, plugin):
        self.plugins.append(plugin)

    def add_alias(self, name, command):
        self.aliases[name] = command

    def add_env_var(self, key, value):
        self.env_vars[key] = value

    def generate(self):
        self.lines.append("# ~/.zshrc generated by ZshrcBuilder\n")

        # Environment variables
        if self.env_vars:
            self.lines.append("# Environment Variables")
            for key, value in self.env_vars.items():
                self.lines.append(f"export {key}=\"{value}\"")
            self.lines.append("")

        # Plugins (example assumes you're using zinit or oh-my-zsh)
        if self.plugins:
            self.lines.append("# Plugins")
            self.lines.append("plugins=(")
            for plugin in self.plugins:
                self.lines.append(f"  {plugin}")
            self.lines.append(")")
            self.lines.append("")

        # Aliases
        if self.aliases:
            self.lines.append("# Aliases")
            for name, cmd in self.aliases.items():
                self.lines.append(f"alias {name}='{cmd}'")
            self.lines.append("")

        # End marker
        self.lines.append("# End of ~/.zshrc\n")

    def write(self, output_path=None, backup=True):
        home = Path.home()
        zshrc_path = Path(output_path) if output_path else home / ".zshrc"

        if backup and zshrc_path.exists():
            backup_path = zshrc_path.with_suffix(".zshrc.bak")
            shutil.copy(zshrc_path, backup_path)
            print(f"📝 Backed up existing .zshrc to {backup_path}")

        self.generate()
        zshrc_path.write_text("\n".join(self.lines))
        print(f"✅ Wrote new .zshrc to {zshrc_path}")

